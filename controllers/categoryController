const Category = require("../models/categoryModel");

// Lấy tất cả category
exports.getCategories = async (req, res) => {
  try {
    const categories = await Category.find({});
    res.json(categories);
  } catch (error) {
    res.status(500).json({ message: "Lỗi server", error });
  }
};

// Lấy 1 category kèm subCategories
exports.getCategoryById = async (req, res) => {
  try {
    const category = await Category.findById(req.params.id);
    if (!category) return res.status(404).json({ message: "Không tìm thấy category" });
    res.json(category);
  } catch (error) {
    res.status(500).json({ message: "Lỗi server", error });
  }
};

// Lấy danh sách subCategories của 1 category
exports.getSubCategories = async (req, res) => {
  try {
    const { id } = req.params; // categoryId

    const category = await Category.findById(id).select("subCategories");
    if (!category) {
      return res.status(404).json({ message: "Category không tồn tại" });
    }

    res.json(category.subCategories);
  } catch (error) {
    res.status(500).json({ message: "Lỗi server", error });
  }
};


// Thêm subCategory mới
exports.addSubCategory = async (req, res) => {
  try {
    const { id } = req.params; // id của Category
    const { label, icon } = req.body;

    const category = await Category.findById(id);
    if (!category) {
      return res.status(404).json({ message: "Category không tồn tại" });
    }

    category.subCategories.push({ label, icon });
    await category.save();

    res.status(201).json(category);
  } catch (error) {
    res.status(500).json({ message: "Lỗi server", error });
  }
};

// Cập nhật subCategory
exports.updateSubCategory = async (req, res) => {
  try {
    const { id, subId } = req.params; // id = categoryId, subId = subCategoryId
    const { label, icon } = req.body;

    const category = await Category.findById(id);
    if (!category) {
      return res.status(404).json({ message: "Category không tồn tại" });
    }

    const subCategory = category.subCategories.id(subId);
    if (!subCategory) {
      return res.status(404).json({ message: "SubCategory không tồn tại" });
    }

    if (label) subCategory.label = label;
    if (icon) subCategory.icon = icon;

    await category.save();

    res.json(subCategory);
  } catch (error) {
    res.status(500).json({ message: "Lỗi server", error });
  }
};

// Xóa subCategory
exports.deleteSubCategory = async (req, res) => {
  try {
    const { id, subId } = req.params; // id = categoryId, subId = subCategoryId

    const category = await Category.findById(id);
    if (!category) {
      return res.status(404).json({ message: "Category không tồn tại" });
    }

    const subCategory = category.subCategories.id(subId);
    if (!subCategory) {
      return res.status(404).json({ message: "SubCategory không tồn tại" });
    }

    subCategory.deleteOne(); // xóa subCategory trong mảng
    await category.save();

    res.json({ message: "Xóa subCategory thành công" });
  } catch (error) {
    res.status(500).json({ message: "Lỗi server", error });
  }
};


// Tìm food theo subCategory.label
exports.searchFoodBySubCategory = async (req, res) => {
  try {
    const { keyword } = req.query;

    if (!keyword) {
      return res
        .status(400)
        .json({ message: "keyword query parameter is required" });
    }

    // Tìm tất cả category có subCategories match keyword
    const categories = await Category.find({
      "subCategories.label": { $regex: keyword, $options: "i" },
    });

    if (!categories.length) {
      return res.status(404).json({ message: "No food found" });
    }

    // Gom tất cả subCategory match vào 1 mảng
    const results = [];
    categories.forEach((cat) => {
      cat.subCategories.forEach((sub) => {
        if (sub.label.toLowerCase().includes(keyword.toLowerCase())) {
          results.push({
            category: cat.label, // danh mục cha
            ...sub.toObject(),  // food (icon, label)
          });
        }
      });
    });

    res.json(results);
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
};



